from utils import model_request
from model_request.general.const_values import metrics, get_columns, get_unique_values, get_first_rows

    
def get_prompt(df, request):
    prompt = f"""
Ты аналитик данных с опытом 20 лет. 
Все 20 лет ты анализируешь только одну таблицу, и знаешь все её нюансы.
Напомню тебе информацию о таблице, с которой ты работаешь.

Таблица имеет столбцы: 
{get_columns(df)}

Первые три строки из этой таблицы:
{get_first_rows(df)}

Ключевые столбцы имеют следующие уникальные значения:
{get_unique_values(df)}

Подсказки к таблице:
{metrics}


Босс дал тебе задачу по анализу этой таблицы.
Проблема в том, что Босс плохо формулирует свои мысли и дает расплывчатые задачи.
Твоя работа - писать ясную, чёткую и понятную версию задачи Босса.
Эта версия потом будет передана твоему коллеге, чтобы он написал шаги для её выполнения.

Сперва ты напишешь ясную, чёткую и понятную версию задачи Босса.
Затем ты напишешь, в каком виде лучше всего предоставить результат выполнения задачи. 
Это может быть только один из этих вариантов: "Текст", "Число", "Таблица", "Список", "Линейный график", "Гистограмма" или "Круговая диаграмма".

Ты НИКОГДА не пишешь никаких комментариев и вопросов.
Задача Босса в итоге должна звучать как утверждение, а не как вопрос.
Если это уместно, используй в своей версии задачи термины, названия и формулы из информации, предоставленной выше.

Ты ОБЯЗАТЕЛЬНО пишешь ответ ТОЛЬКО по этому шаблону, и никак иначе:
'''
<переформулированный запрос>. 
Ожидаемый тип данных — <вид результата>.
'''

Запрос босса:'''{request}'''.
"""
    return prompt
    
def get_response(df, request, model_params):
    prompt = get_prompt(df, request)
    print(prompt)
    model_response = model_request(
        prompt,
        model_params
    )
    return model_response