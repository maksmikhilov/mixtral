from transformers import AutoTokenizer, BitsAndBytesConfig, AutoModelForCausalLM
import torch

device = "cuda"
model_id = "mistralai/Mixtral-8x7B-Instruct-v0.1"
quantization_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_compute_dtype=torch.float16
)

tokenizer = AutoTokenizer.from_pretrained(model_id)
model = AutoModelForCausalLM.from_pretrained(model_id, quantization_config=quantization_config)
prompt = """
___________ Начало условий задачи ___________
1) Csv таблица со столбцами: ['dt', 'region_key', 'region_name', 'business_unit', 'macroregion_name', 'name_prnt_segm_level_1', 'business_service_name', 'service_name', 'tech', 'macro_tech', 'service_detail', 'macro_kpi', 'unit', 'kpi_value']

2) Столбец region_name имеет следующие уникальные значения: ['Республика Башкортостан', 'Карачаево-Черкесская Республика', 'Костромская область', 'Ульяновская область' 'Республика Карелия', 'Кемеровская область', 'Республика Бурятия', 'Республика Марий Эл', 'Томская область', 'Свердловская область', 'Республика Калмыкия', 'Удмуртская Республика', 'Ярославская область', 'Рязанская область', 'Кабардино-Балкарская Республика', 'Москва', 'Ставропольский край', 'Республика Северная Осетия - Алания', 'Красноярский край', 'Ленинградская область', 'Магаданская область', 'Астраханская область', 'Омская область', 'Ивановская область', 'Санкт-Петербург', 'Тамбовская область', 'Республика Адыгея', 'Кировская область', 'Республика Татарстан', 'Калининградская область', 'Ямало-Ненецкий автономный округ', 'Тульская область', 'Челябинская область', 'Ростовская область', 'Забайкальский край', 'Оренбургская область', 'Краснодарский край', 'Курганская область', 'Тверская область', 'Республика Хакасия', 'Нижегородская область', 'Республика Алтай', 'Республика Коми', 'Новосибирская область', 'Приморский край', 'Самарская область', 'Чувашская Республика', 'Липецкая область' 'Смоленская область', 'Амурская область', 'Иркутская область', 'Архангельская область', 'Владимирская область', 'Республика Саха (Якутия)', 'Пензенская область', 'Брянская область', 'Воронежская область', 'Саратовская область', 'Вологодская область', 'Алтайский край', 'Псковская область', 'Камчатский край', 'Московская область', 'Чукотский автономный округ', 'Еврейская автономная область', 'Белгородская область', 'Чеченская республика']

3) Столбец macro_region имеет следующие уникальные значения: ['МР03 - Волга', 'МР04 - Юг', 'МР01 - Центр', 'МР02 - Северо-Запад', 'МР06 - Сибирь', 'МР05 - Урал', 'МР07 - Дальний Восток', 'Корпоративный центр']

4) Столбец business_service_name имеет следующие уникальные значения: ['Интернет', 'Телефония (фиксированная)', 'Телевидение']

5) Столбец service_name имеет следующие уникальные значения: ['ШПД', 'Традиционная телефония', 'IP-телефония', 'IP-TV']

5) Столбец macro_kpi имеет следующие уникальные значения: ['Абоненты на конец периода', 'Активная АБ 1М', 'Доходы', 'Абоненты на начало периода', 'Голосовой трафик', 'Отток', 'Уникальные пользователи', 'Подключения', 'Трафик в СПД']
 
 
Метрики, которые можно посчитать из этих данных:

1) Доход = df[df['macro_kpi'] == 'Доход']['kpi_value']

2) Абонентская База = df[df['macro_kpi'] == 'Абоненты на конец периода']['kpi_value']

3) Абонентская База <service_name> = df[(df['macro_kpi'] == 'Абоненты на конец периода') & (df['service_name'] == <service_name>)]['kpi_value']

4) Абонентская База <business_service_name> = df[(df['macro_kpi'] == 'Абоненты на конец периода') & (df['business_service_name'] == <business_service_name>)]['kpi_value']

5) Абонентов на начало периода = df[df['macro_kpi'] == 'Абоненты на начало периода']['kpi_value']

6) Абонентов на начало периода <service_name> = df[(df['macro_kpi'] == 'Абоненты на начало периода') & (df['service_name'] == <service_name>)]['kpi_value']

7) Абонентов на начало периода <business_service_name> = df[(df['macro_kpi'] == 'Абоненты на начало периода') & (df['business_service_name'] == <business_service_name>)]['kpi_value']

8) Активная АБ 1М = df[df['macro_kpi'] == 'Активная АБ 1М']['kpi_value']

9) Уникальные пользователи = df[df['macro_kpi'] == 'Уникальные пользователи']['kpi_value']

10) Трафик СПД = df[df['macro_kpi'] == 'Трафик в СПД']['kpi_value']

11) Голосовой трафик = df[df['macro_kpi'] == 'Голосовой трафик']['kpi_value']

12) Подключения = df[df['macro_kpi'] == 'Подключения']['kpi_value']

13) Отток = df[df['macro_kpi'] == 'Отток']['kpi_value']

14) Средняя Абонентская База = (Абоненты на конец периода + Абоненты на начало периода) / 2

15) Средняя Абонентская База <service_name> = (Абонентская База <service_name> + Абоненты на начало периода <service_name>) / 2

16) Средняя Абонентская База <business_service_name> = (Абонентская База <business_service_name> + Абоненты на начало периода <business_service_name>) / 2

17) Churn rate = Отток / Средняя Абонентская База 

18) ARPU = Доход / Средняя Абонентская База 

19) GBOU = Трафик СПД / Средняя Абонентская База ШПД

20) MOU = Голосовой трафик / Средняя  Абонентская База Телефонии
___________ Конец условий задачи ___________

Задача:
Рассчитай абонентскую базу телефонии за 2020 год

Дополнительные условия:
Решением дай код на питоне без лишнего текста и комментариев

"""
inputs = tokenizer(prompt, return_tensors="pt").to(device)
output = model.generate(
    **inputs,
    max_new_tokens=2048,
    temperature=0.1
    )
print(tokenizer.decode(output[0], skip_special_tokens=True))